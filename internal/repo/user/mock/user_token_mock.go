// Code generated by MockGen. DO NOT EDIT.
// Source: user_token.go

// Package user_mock is a generated GoMock package.
package user_mock

import (
	reflect "reflect"

	user "git.legchelife.ru/root/template/internal/repo/user"
	context "git.legchelife.ru/root/template/pkg/models/context"
	gomock "github.com/golang/mock/gomock"
)

// MockIToken is a mock of IToken interface.
type MockIToken struct {
	ctrl     *gomock.Controller
	recorder *MockITokenMockRecorder
}

// MockITokenMockRecorder is the mock recorder for MockIToken.
type MockITokenMockRecorder struct {
	mock *MockIToken
}

// NewMockIToken creates a new mock instance.
func NewMockIToken(ctrl *gomock.Controller) *MockIToken {
	mock := &MockIToken{ctrl: ctrl}
	mock.recorder = &MockITokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIToken) EXPECT() *MockITokenMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIToken) Get(ctx *context.Base, userID, companyID int) (*user.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, companyID)
	ret0, _ := ret[0].(*user.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockITokenMockRecorder) Get(ctx, userID, companyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIToken)(nil).Get), ctx, userID, companyID)
}
