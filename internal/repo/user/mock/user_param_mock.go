// Code generated by MockGen. DO NOT EDIT.
// Source: user_param.go

// Package user_mock is a generated GoMock package.
package user_mock

import (
	reflect "reflect"

	user "git.legchelife.ru/root/template/internal/repo/user"
	context "git.legchelife.ru/root/template/pkg/models/context"
	gomock "github.com/golang/mock/gomock"
)

// MockIParam is a mock of IParam interface.
type MockIParam struct {
	ctrl     *gomock.Controller
	recorder *MockIParamMockRecorder
}

// MockIParamMockRecorder is the mock recorder for MockIParam.
type MockIParamMockRecorder struct {
	mock *MockIParam
}

// NewMockIParam creates a new mock instance.
func NewMockIParam(ctrl *gomock.Controller) *MockIParam {
	mock := &MockIParam{ctrl: ctrl}
	mock.recorder = &MockIParamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIParam) EXPECT() *MockIParamMockRecorder {
	return m.recorder
}

// GetList mocks base method.
func (m *MockIParam) GetList(ctx *context.Base, id int) ([]user.Param, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, id)
	ret0, _ := ret[0].([]user.Param)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockIParamMockRecorder) GetList(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockIParam)(nil).GetList), ctx, id)
}
