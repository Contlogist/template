basePath: /v1
definitions:
  response.Base:
    properties:
      data: {}
      error: {}
    type: object
  rp_section.Section:
    properties:
      icon:
        type: string
      name:
        type: string
      url:
        type: string
    required:
    - name
    - url
    type: object
  user.AccessToken:
    properties:
      hours:
        type: integer
      token:
        type: string
    type: object
  user.RefreshToken:
    properties:
      hours:
        type: integer
      token:
        type: string
    type: object
  user.Tokens:
    properties:
      access:
        $ref: '#/definitions/user.AccessToken'
      refresh:
        $ref: '#/definitions/user.RefreshToken'
    type: object
  user.User:
    properties:
      company_id:
        type: integer
      email:
        type: string
      name:
        type: string
      password:
        type: string
      refresh_token:
        type: string
    required:
    - company_id
    - email
    - name
    - password
    type: object
  user.UserFilter:
    properties:
      email:
        example: r.abramov@contlogist.ru
        format: email
        type: string
      password:
        example: "123456"
        format: password
        type: string
    type: object
host: localhost:1000
info:
  contact: {}
  description: Шаблон для создания нового сервиса
  title: TEMPLATE
paths:
  /section/get.list:
    get:
      consumes:
      - application/json
      description: |
        Метод получает список секций
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/rp_section.Section'
                  - properties:
                      id:
                        type: integer
                    type: object
                error:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
      security:
      - Authorization: []
      summary: Получение списка секций
      tags:
      - Section
  /user/delete:
    delete:
      consumes:
      - application/json
      description: |-
        Метод удаления пользователя
        ID пользователя берется из payload
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: boolean
                error:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
      security:
      - Authorization: []
      summary: Обновление пользователя
      tags:
      - User
  /user/get:
    get:
      consumes:
      - application/json
      description: |-
        Метод получения пользователя - (payload)
        ID пользователя берется из payload
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/user.User'
                  - properties:
                      id:
                        type: integer
                    type: object
                error:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
      security:
      - Authorization: []
      summary: Получение пользователя
      tags:
      - User
  /user/get.list:
    post:
      consumes:
      - application/json
      description: |-
        Метод получения списка пользователей - (filter + payload)
        Фильтр основывается на payload(cid)
      parameters:
      - description: Фильтр
        in: body
        name: filter
        schema:
          $ref: '#/definitions/user.UserFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/response.Base'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/user.User'
                    type: array
                  error:
                    type: object
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
      security:
      - Authorization: []
      summary: Получение списка пользователей
      tags:
      - User
  /user/param/get.list:
    get:
      consumes:
      - application/json
      description: Метод получения параметров пользователя по id
      parameters:
      - description: ID пользователя
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/user.User'
            - properties:
                id:
                  type: integer
              type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      tags:
      - User/Param
  /user/post:
    post:
      consumes:
      - application/json
      description: |-
        Метод создания пользователя, используется при регистрации компании (создается администратор)),
        а так же когда администратор создает пользователя в своей компании
        CID (ID компании) берется из payload (из токена администратора)
      parameters:
      - description: Пользователь
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: integer
                error:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
      security:
      - Authorization: []
      summary: Создание пользователя
      tags:
      - User
  /user/post100000:
    post:
      consumes:
      - application/json
      description: Метод создания 100000 пользователей, используется для тестирования
      parameters:
      - description: Пользователь
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: integer
                error:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
      security:
      - Authorization: []
      summary: Создание 100000 пользователей
      tags:
      - User
  /user/put:
    put:
      consumes:
      - application/json
      description: |-
        Метод обновления пользователя
        ID пользователя берется из payload
      parameters:
      - description: Пользователь
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: boolean
                error:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/response.Base'
            - properties:
                data:
                  type: object
                error:
                  type: string
              type: object
      security:
      - Authorization: []
      summary: Обновление пользователя
      tags:
      - User
  /user/token/get:
    get:
      consumes:
      - application/json
      description: Метод получает токен пользователя (аутентификация)
      parameters:
      - description: email
        in: query
        name: email
        required: true
        type: string
      - description: password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.Tokens'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      tags:
      - User/Token
securityDefinitions:
  Authorization:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
